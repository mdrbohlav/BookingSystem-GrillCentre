extends layout

block content
    section.content
        .container__md
            .box
                .box__header.box__header--border
                    h2.text__title !{__('pages_users_titles_1')}
                .box__body
                    h3 !{__('pages_users_titles_2')}
                    form#searchUser(action='/admin/users?accept=json', method='GET')
                        .fieldset.row
                            .field__container.col-xs-12.col-sm-6.margin--top-20
                                label.text__label(for='search') !{__('labels_search')}
                                .field
                                    input#search(type='text', name='search')
                            .field__container.col-xs-12.col-sm-6.margin--top-20
                                label.text__label(for='find-block') !{__('labels_block')}
                                .field.field__select
                                    select#find-block(name='find-block')
                                        option(value='') !{__('pages_users_all')}
                                        each i in [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 ]
                                            option(val=i)= i
                            .field__container.col-xs-12.col-sm-6.margin--top-20
                                .field__checkbox
                                    span.checkbox.active
                                        input#isId(type='checkbox', name='isId', checked)
                                    label.t__label(for='isId') !{__('labels_isIdExists')}
                            .field__container.col-xs-12.col-sm-6.margin--top-20
                                .field__checkbox
                                    span.checkbox
                                        input#ban(type='checkbox', name='ban')
                                    label.t__label(for='ban') !{__('labels_ban')}
                        .form__footer.text--center.margin--top-40
                            button.btn.btn__orange(type='submit') !{__('buttons_find')}
                            button#resetList.btn.btn__orange--full(type='button') !{__('buttons_reset')}
                    .table__wrapper.margin--top-55
                        ul#listUsers.listUsers.table.table__styled.table--fullsize.table--responsive.text--center
                            each user, i in data.users
                                if i === 0
                                    li.table__row.table__heading
                                        .table__cell !{__('labels_name')}
                                        .table__cell !{__('labels_admin')}
                                        .table__cell !{__('labels_isId')}
                                        .table__cell !{__('labels_ban')}
                                        .table__cell !{__('labels_rating')}
                                        .table__cell !{__('labels_remove')}
                                li.user.table__row(data-id=user.id)
                                    .table__cell= user.fullName
                                    .user__admin.table__cell: span.icon(class='icon__' + (user.isAdmin ? 'check' : 'cross'))
                                    .table__cell
                                        if user.isId
                                            a(href='https://is.sh.cvut.cz/users/' + user.isId, target='_blank')= user.isId
                                    .user__ban.table__cell: span.icon(class='icon__' + (user.banned ? 'check' : 'cross'))
                                    .user__rating.table__cell
                                        if user.ratings.length > 0
                                            - var total = 0
                                            each rating in user.ratings
                                                - total += rating.value
                                            span.icon.icon__star.text--yellow
                                            |  #{Math.round(total / user.ratings.length) / 10}
                                        else
                                            span !{__('labels_notrated')}
                                    .table__cell
                                        if !user.isId
                                            button.btn__remove.icon.icon__cross(type='button', data-id= user.id, title="#{__('buttons_delete')}")
                            if data.users.length === 0
                                li.table__row.table__noborder
                                    .table__cell
                                        p.text__paragraph.text--center !{__('pages_users_nothing')}
                    if data.total / data.pagination.limit > 1
                        .text--center.margin--top-35
                            ol.pagination
                                - var pages = Math.ceil(data.total / data.pagination.limit)
                                - var current = data.pagination.offset / data.pagination.limit + 1
                                if current === 1
                                    li: button.pagination__prev.icon.icon__arrow-left(type='button', disabled)
                                else
                                    li: button.pagination__prev.icon.icon__arrow-left(type='button', data-page= (current - 1))

                                if current > 2 && pages !== 3
                                    li: button(type='button', data-page='1') 1
                                if current > 3
                                    li: span.text â€¦
                                if current === pages && current > 2
                                    li: button(type='button', data-page= (current - 2))= (current - 2)
                                if current > 1
                                    li: button(type='button', data-page= (current - 1))= (current - 1)
                                li: button(type='button', data-page= current, disabled)= current
                                if current < pages
                                    li: button(type='button', data-page= (current + 1))= (current + 1)
                                if current === 1 && pages > 2
                                    li: button(type='button', data-page= (current + 2))= (current + 2)
                                if current < pages - 2
                                    li: span.text â€¦
                                if current < pages - 1 && pages !== 3
                                    li: button(type='button', data-page= pages)= pages

                                if current < pages
                                    li: button.pagination__next.icon.icon__arrow-right(type='button', data-page= (current + 1))
                                else
                                    li: button.pagination__next.icon.icon__arrow-right(type='button', disabled)
            .box
                .box__header.box__header--border
                    h2.text__title !{__('pages_users_titles_3')}
                .box__body
                    form#addUser(action='/api/admin/user/create', method='POST')
                        .fieldset.row
                            .field__container.col-xs-12.col-sm-6.margin--top-20
                                label.text__label(for='firstname') !{__('labels_firstname')}
                                .field
                                    input#firstname(type='text', name='firstname', required)
                            .field__container.col-xs-12.col-sm-6.margin--top-20
                                label.text__label(for='lastname') !{__('labels_lastname')}
                                .field
                                    input#lastname(type='text', name='lastname')
                            .field__container.col-xs-12.col-sm-6.margin--top-20
                                label.text__label(for='email') !{__('labels_email')}
                                .field
                                    input#email(type='email', name='email', required)
                            .field__container.col-xs-12.col-sm-6.margin--top-20
                                label.text__label(for='email') !{__('labels_phone')}
                                .field
                                    input#phone(type='tel', name='phone', required)
                            .field__container.col-xs-12.col-sm-6.margin--top-20
                                label.text__label(for='locale') !{__('labels_language')}
                                .field.field__select
                                    select#locale(name='locale')
                                        each locale in availableLocales
                                            if user && Object.keys(user.locale)[0] === locale
                                                option(value= locale, selected)= isoLocales[locale].nativeName.split(',')[0]
                                            else
                                                option(value= locale)= isoLocales[locale].name.split(',')[0]
                            .field__container.col-xs-12.col-sm-6.margin--top-20
                                .field__checkbox
                                    span.checkbox
                                        input#isAdmin(type='checkbox', name='isAdmin')
                                    label.t__label(for='isAdmin') !{__('labels_admin')}
                            .field__container.col-xs-12.col-sm-6.margin--top-20
                                label.text__label(for='password') !{__('labels_password')}
                                .field
                                    input#password(type='password', name='password', required)
                            .field__container.col-xs-12.col-sm-6.margin--top-20
                                label.text__label(for='passwordCheck') !{__('labels_password_check')}
                                .field
                                    input#passwordCheck(type='password', name='passwordCheck', required)
                            .field__container.col-xs-12.col-sm-6.margin--top-20
                                label.text__label(for='block') !{__('labels_block')}
                                .field.field__select
                                    select#block(name='block')
                                        option(value='') !{__('pages_users_select')}
                                        each i in [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 ]
                                            option(value=i)= i
                            .field__container.col-xs-12.col-sm-6.margin--top-20
                                label.text__label(for='room') !{__('labels_room')}
                                .field
                                    input#room(type='tel', name='room')
                        .form__footer.text--center.margin--top-40
                            button.btn.btn__orange(type='submit') !{__('buttons_create')}
    section.modal
        .table.table--fullsize
            button.modal__close.btn__close.icon.icon__cross(type='button')
            .modal__content.table__cell
                .container__md
                    .box.modalUser
                        h2.text__title.box__header.box__header--border !{__('modal_user')}
                        .box__body
                            h3.modalUser__title.text__subtitle.text--default
                            .row
                                .col-xs-12.col-sm-6
                                    .modalUser__admin.text__paragraph.margin--top-10
                                        span.text--strong !{__('labels_admin')}
                                        span.value
                                        button.grant.btn.btn__orange.btn--small(data-type='button') !{__('buttons_grant')}
                                        button.take.btn.btn__orange.btn--small(data-type='button') !{__('buttons_take')}
                                    .modalUser__email.text__paragraph.margin--top-10
                                        span.text--strong !{__('labels_email')}
                                        span.value
                                    .modalUser__cell.text__paragraph.margin--top-10
                                        span.text--strong !{__('labels_blockRoom')}
                                        span.value
                                .col-xs-12.col-sm-6
                                    .modalUser__ban.text__paragraph.margin--top-10
                                        span.text--strong !{__('labels_ban')}
                                        span.value
                                        button.grant.btn.btn__orange.btn--small(data-type='button') !{__('buttons_grant')}
                                        button.take.btn.btn__orange.btn--small(data-type='button') !{__('buttons_take')}
                                    .modalUser__isid.text__paragraph.margin--top-10
                                        span.text--strong !{__('labels_isId')}
                                        span.value
                                    .modalUser__locale.text__paragraph.margin--top-10
                                        span.text--strong !{__('labels_language')}
                                        span.value
                            .modalUser__rating
                                h4.text__subtitle.margin--top-35 !{__('modal_allRatings')} (
                                    span.modalUser__ratingTotal
                                    | )
                                ul#listRating.table.table__styled.table--fullsize.text--center
                                    li.table__row.table__noborder
                                        .table__cell
                                            p.text__paragraph.text--center !{__('pages_reservations_nothing_4')}

block scripts
    script.
        var users = !{JSON.stringify(data.users)};

        function arrayToObject(arr, key) {
            var tmp = {};
            for (var i = 0; i < arr.length; i++) {
                tmp[arr[i][key]] = arr[i];
            }
            return tmp;
        }

        function generatePagination(current, pages) {
            $pagination = $('.pagination');
            $pagination.html('');

            if (current === 1) {
                $pagination.append('<li><button class="pagination__prev icon icon__arrow-left" type="button" disabled>');
            } else {
                $pagination.append('<li><button class="pagination__prev icon icon__arrow-left" type="button" data-page="' + (current - 1) + '">');
            }

            if (current > 2 && pages !== 3) {
                $pagination.append('<li><button type="button" data-page="1">1');
            }
            if (current > 3) {
                $pagination.append('<li><span class="text">â€¦');
            }
            if (current === pages && current > 2) {
                $pagination.append('<li><button type="button" data-page="' + (current - 2) + '">' + (current - 2));
            }
            if (current > 1) {
                $pagination.append('<li><button type="button" data-page="' + (current - 1) + '">' + (current - 1));
            }
            $pagination.append('<li><button type="button" data-page="' + current + '" disabled>' + current);
            if (current < pages) {
                $pagination.append('<li><button type="button" data-page="' + (current + 1) + '">' + (current + 1));
            }
            if (current === 1 && pages > 2) {
                $pagination.append('<li><button type="button" data-page="' + (current + 2) + '">' + (current + 2));
            }
            if (current < pages - 2) {
                $pagination.append('<li><span class="text">â€¦');
            }
            if (current < pages - 1 && pages !== 3) {
                $pagination.append('<li><button type="button" data-page="' + pages + '">' + pages);
            }

            if (current < pages) {
                $pagination.append('<li><button class="pagination__next icon icon__arrow-right" type="button" data-page="' + (current + 1) + '">');
            } else {
                $pagination.append('<li><button class="pagination__next icon icon__arrow-right" type="button" disabled>');
            }

            paginationFunctionality();
        }

        function loadPage(page, updateHistory, url) {
            var limit = #{data.pagination.limit},
                $list = $('#listUsers'),
                $spinner = $('<div class="spinner--absolute"></div>').append(getSpinner());
            url += '&offset=' + ((page - 1) *Â limit) + '&limit=' + limit;

            $list.append($spinner);

            firstLoad = true;
            if (updateHistory) {
                var historyUrl = url.replace(/accept=json/, '').replace(/\?&/, '?'),
                    historyState = {
                        page: page
                    },
                    historyTitle = document.title;
                history.pushState(historyState, historyTitle, historyUrl);
            }

            makeRequest(url, 'GET', {}, function(res) {
                generatePagination(res.pagination.offset / res.pagination.limit + 1, Math.ceil(res.total / res.pagination.limit));

                users = arrayToObject(res.users, 'id');;
                if (res.users.length === 0) {
                    $list.html(getUserEmptyRow());
                } else {
                    $list.html(getUserTableHeading());
                    for (var i = 0; i < res.users.length; i++) {
                        $list.append(getUserRow(res.users[i]));
                    }
                }
            }, function(res) {
                console.log(res);
                if (res instanceof Array) {
                    for (var i = 0; i < res.length; i++) {
                        addNotification('error', res[i].message);
                    }
                } else {
                    var msg = res.responseJSON.error.message;
                    addNotification('error', msg);
                }
            });
        }

        function paginationFunctionality() {
            $('.pagination button').on('click', function() {
                var $this = $(this),
                    page = parseInt($this.attr('data-page'));
                loadPage(page, true, '/admin/users?accept=json');
            });
        }

        function removeBtnFunctionality($btn) {
            $btn.on('click', function() {
                if (!confirm('!{__('pages_users_confirm_1')}')) {
                    return;
                }

                var $this = $(this),
                    $row = $this.closest('.table__row'),
                    id = $this.attr('data-id');

                makeRequest('/api/admin/user/' + id, 'DELETE', {}, function(res) {
                    addNotification('success', '!{__('success_user_deleted')}');
                    $row.remove();
                    if ($('#listUsers li:not(.table__heading)').length === 0) {
                        $('#listUsers').html('<li class="table__row table__noborder"><div class="table__cell"><p class="text__paragraph text--center">!{__('pages_users_nothing')}</p></div></li>');
                    }
                }, function(res) {
                    console.log(res);
                    if (res instanceof Array) {
                        for (var i = 0; i < res.length; i++) {
                            addNotification('error', res[i].message);
                        }
                    } else {
                        var msg = res.responseJSON.error.message;
                        addNotification('error', msg);
                    }
                });
            });
        }

        function getUserTableHeading() {
            return $('<li class="table__row table__heading">')
                .append('<div class="table__cell">!{__('labels_name')}')
                .append('<div class="table__cell">!{__('labels_admin')}')
                .append('<div class="table__cell">!{__('labels_isId')}')
                .append('<div class="table__cell">!{__('labels_ban')}')
                .append('<div class="table__cell">!{__('labels_rating')}')
                .append('<div class="table__cell">!{__('labels_remove')}');
        }

        function getUserRow(user) {
            var totalRating = 0;
            for (var i = 0; i <  user.ratings.length; i++) {
                totalRating += user.ratings[i].value;
            }
            if (totalRating > 0) {
                totalRating = Math.round(totalRating / user.ratings.length) / 10;
            }
            var $row = $('<li class="user table__row" data-id="' + user.id + '">')
                .append('<div class="table__cell">' + user.fullName)
                .append('<div class="table__cell"><span class="icon icon__' + (user.isAdmin ? 'check' : 'cross') + '">')
                .append('<div class="table__cell">' + (user.isId ? '<a href="https://is.sh.cvut.cz/users/' + user.isId + '" target="_blank">' + user.isId : ''))
                .append('<div class="table__cell"><span class="icon icon__' + (user.banned ? 'check' : 'cross') + '">');
            if (user.ratings.length) {
                $row.append('<div class="table__cell"><span class="icon icon__star text--yellow"></span> ' + totalRating);
            } else {
                $row.append('<div class="table__cell">!{__('labels_notrated')}');
            }
            if (!user.isId) {
                var $btn = $('<button class="btn__remove icon icon__cross" type="button" data-id="' + user.id + '" title="!{__('buttons_remove')}"></button>');
                $row.append($('<div class="table__cell"></div>').append($btn));
                removeBtnFunctionality($btn);
            } else {
                $row.append('<div class="table__cell"></div>');
            }
            userDetailFunctionality($row);
            return $row;
        }

        function getUserEmptyRow() {
            return $('<li class="table__row table__noborder">')
                .append($('<div class="table__cell">')
                    .append('<p class="text__paragraph text--center">!{__('pages_users_nothing')}'));
        }

        function getRatingTableHeading() {
            return $('<li class="table__row table__heading">')
                .append('<div class="table__cell">!{__('labels_added')}')
                .append('<div class="table__cell">!{__('labels_rating')}')
                .append('<div class="table__cell">!{__('labels_comment')}');
        }

        function getRatingRow(rating) {
            var tmp = moment(),
                set = moment(rating.updatedAt).subtract(tmp.local().utcOffset(), 'm');
            return $('<li class="rating table__row" data-id="' + rating.id + '">')
                .append('<div class="table__cell" data-date="' + rating.updatedAt + '">' + set.format('LL'))
                .append('<div class="rating__value table__cell"><span class="icon icon__star text--yellow"></span> ' + (rating.value / 10))
                .append('<div class="rating__comment table__cell">' + rating.comment);
        }

        function getRatingEmptyRow() {
            return $('<li class="table__row table__noborder">')
                .append($('<div class="table__cell">')
                    .append('<p class="text__paragraph text--center">!{__('pages_reservations_nothing_4')}'));
        }

        function setModalUser(id) {
            var user = users[id],
                today = new Date();
                today.setUTCHours(0, 0, 0, 0);

            $('.modalUser').attr('data-id', id);
            $('.modalUser__title').text(user.fullName);
            $('.modalUser__admin .value').text((user.isAdmin ? '!{__('labels_yes')}' : '!{__('labels_no')}'));
            if (user.isAdmin) {
                $('.modalUser__admin .grant').hide();
                $('.modalUser__admin .take').show();
            } else {
                $('.modalUser__admin .grant').show();
                $('.modalUser__admin .take').hide();
            }
            $('.modalUser__email .value').html('<a href="mailto:' + user.email + '">' + user.email + '</a>');
            if (user.block &&Â user.room) {
                $('.modalUser__cell').show();
                $('.modalUser__cell .value').text(user.block + '/' + user.room);
            } else {
                $('.modalUser__cell').hide();
            }
            $('.modalUser__ban .value').text((user.banned ? '!{__('labels_yes')}' : '!{__('labels_no')}'));
            if (user.banned) {
                $('.modalUser__ban .grant').hide();
                $('.modalUser__ban .take').show();
            } else {
                $('.modalUser__ban .grant').show();
                $('.modalUser__ban .take').hide();
            }
            if (user.isId) {
                $('.modalUser__isid').show();
                $('.modalUser__isid .value').html('<a href="https://is.sh.cvut.cz/users/' + user.isId + '" target="_blank">' + user.isId + '</a>');
            } else {
                $('.modalUser__isid').hide();
            }
            var locale = Object.keys(user.locale)[0];
            if ('#{Object.keys(user.locale)[0]}' === locale) {
                $('.modalUser__locale .value').text(user.locale[locale].nativeName);
            } else {
                $('.modalUser__locale .value').text(user.locale[locale].name);
            }

            var $list = $('#listRating');

            var totalRating = 0;
            if (user.ratings.length) {
                $list.html(getRatingTableHeading());
                for (var i = 0; i <  user.ratings.length; i++) {
                    totalRating += user.ratings[i].value;
                    $list.append(getRatingRow(user.ratings[i]));
                }
                if (totalRating > 0) {
                    totalRating = Math.round(totalRating / user.ratings.length) / 10;
                }
            } else {
                $list.html(getRatingEmptyRow());
            }
            $('.modalUser__ratingTotal').text(totalRating);
        }

        function userDetailFunctionality($btn) {
            $btn.on('click', function(event) {
                var $row = $(this),
                    id = $row.attr('data-id'),
                    ignore = $row.find('button').toArray();
                if (ignore.indexOf(event.target) > -1) {
                    return;
                }
                setModalUser(id);

                showModal();
            });
        }

        $(document).ready(function() {
            users = arrayToObject(users, 'id');

            //=================================================================
            // Reset users list
            //=================================================================
            $('#resetList').on('click', function() {
                loadPage(1, true, '/admin/users?accept=json');
            });

            //=================================================================
            // Search form
            //=================================================================
            $('#searchUser').validate({
                submitHandler: function(form) {
                    var query = '';
                    if ($('#search').val() !== '') {
                        query += '&search=' + encodeURIComponent($('#search').val());
                    }
                    if ($('#find-block').val() !== '') {
                        query += '&block=' + $('#find-block').val();
                    }
                    query += '&isId=' + $('#isId').prop('checked');
                    query += '&ban=' + $('#ban').prop('checked');
                    
                    var url = $(form).attr('action') + query;
                    loadPage(1, true, url);
                }
            });

            $('.user[data-id]').each(function(i, element) {
                userDetailFunctionality($(element));
            });

            paginationFunctionality();

            //=================================================================
            // Delete native user
            //=================================================================
            $('.btn__remove').each(function(i, element) {
                removeBtnFunctionality($(element));
            });

            //=================================================================
            // Ban user
            //=================================================================
            $('.modalUser__ban .grant').on('click', function() {
                var $this = $(this),
                    $user = $this.closest('.modalUser'),
                    id = $user.attr('data-id'),
                    $state = $user.find('.modalUser__ban .value'),
                    $unban = $this.next(),
                    data = {
                        banned: true
                    };

                makeRequest('/api/admin/user/' + id, 'PUT', data, function(res) {
                    addNotification('success', '!{__('success_user_banned')}' + ' (' + users[id].fullName + ')');
                    $this.hide();
                    $unban.show();
                    $('.user[data-id="' + id + '"] .user__ban span').removeClass('icon__cross').addClass('icon__check');
                    $state.text('!{__('labels_yes')}');
                }, function(res) {
                    console.log(res);
                    if (res instanceof Array) {
                        for (var i = 0; i < res.length; i++) {
                            addNotification('error', res[i].message);
                        }
                    } else {
                        var msg = res.responseJSON.error.message;
                        addNotification('error', msg);
                    }
                });
            });

            //=================================================================
            // Unban user
            //=================================================================
            $('.modalUser__ban .take').on('click', function() {
                var $this = $(this),
                    $user = $this.closest('.modalUser'),
                    id = $user.attr('data-id'),
                    $state = $user.find('.modalUser__ban .value'),
                    $ban = $this.prev(),
                    data = {
                        banned: false
                    };

                makeRequest('/api/admin/user/' + id, 'PUT', data, function(res) {
                    addNotification('success', '!{__('success_user_unbanned')}' + ' (' + users[id].fullName + ')');
                    $this.hide();
                    $ban.show();
                    $('.user[data-id="' + id + '"] .user__ban span').removeClass('icon__check').addClass('icon__cross');
                    $state.text('!{__('labels_no')}');
                }, function(res) {
                    console.log(res);
                    if (res instanceof Array) {
                        for (var i = 0; i < res.length; i++) {
                            addNotification('error', res[i].message);
                        }
                    } else {
                        var msg = res.responseJSON.error.message;
                        addNotification('error', msg);
                    }
                });
            });

            //=================================================================
            // Add admin permissions
            //=================================================================
            $('.modalUser__admin .grant').on('click', function() {
                var $this = $(this),
                    $user = $this.closest('.modalUser'),
                    id = $user.attr('data-id'),
                    $state = $user.find('.modalUser__admin .value'),
                    $unban = $this.next(),
                    data = {
                        isAdmin: true,
                        priority: 0
                    };

                makeRequest('/api/admin/user/' + id, 'PUT', data, function(res) {
                    addNotification('success', '!{__('success_user_set_admin')}' + ' (' + users[id].fullName + ')');
                    $this.hide();
                    $unban.show();
                    $('.user[data-id="' + id + '"] .user__admin span').removeClass('icon__cross').addClass('icon__check');
                    $state.text('!{__('labels_yes')}');
                }, function(res) {
                    console.log(res);
                    if (res instanceof Array) {
                        for (var i = 0; i < res.length; i++) {
                            addNotification('error', res[i].message);
                        }
                    } else {
                        var msg = res.responseJSON.error.message;
                        addNotification('error', msg);
                    }
                });
            });

            //=================================================================
            // Take admin permissions
            //=================================================================
            $('.modalUser__admin .take').on('click', function() {
                var $this = $(this),
                    $user = $this.closest('.modalUser'),
                    id = $user.attr('data-id'),
                    $state = $user.find('.modalUser__admin .value'),
                    $ban = $this.prev(),
                    data = {
                        isAdmin: false,
                        priority: 1
                    };

                makeRequest('/api/admin/user/' + id, 'PUT', data, function(res) {
                    addNotification('success', '!{__('success_user_unset_admin')}' + ' (' + users[id].fullName + ')');
                    $this.hide();
                    $ban.show();
                    $('.user[data-id="' + id + '"] .user__admin span').removeClass('icon__check').addClass('icon__cross');
                    $state.text('!{__('labels_no')}');
                }, function(res) {
                    console.log(res);
                    if (res instanceof Array) {
                        for (var i = 0; i < res.length; i++) {
                            addNotification('error', res[i].message);
                        }
                    } else {
                        var msg = res.responseJSON.error.message;
                        addNotification('error', msg);
                    }
                });
            });

            //=================================================================
            // Popstate
            //=================================================================
            $window.on('popstate', function(e) {
                if (firstLoad) {
                    if (window.history.state && Object.keys(window.history.state).length) {
                        var url = window.location.pathname + '?accept=json' + window.location.search.replace(/\?/, '&');
                        console.log(url);
                        loadPage(window.history.state.page, false, url);
                    } else {
                        var page = 1;
                        if (urlParam('offset') &&Â urlParam('limit')) {
                            page = parseInt(urlParam('offset')) / parseInt(urlParam('limit')) + 1;
                        }
                        var url = window.location.pathname + '?accept=json' + window.location.search.replace(/\?/, '&');
                        loadPage(page, false,  url);
                    }
                }
                firstLoad = true;
            });

            $('#addUser').validate({
                rules: {
                    firstname: {
                        required: true
                    },
                    email: {
                        required: true
                    },
                    password: {
                        required: true
                    },
                    passwordCheck: {
                        equalTo: "#password"
                    }
                },
                errorPlacement: function() {
                    return false;
                },
                highlight: function(element, errorClass, validClass) {
                    $(element).parent().addClass('error');
                },
                unhighlight: function(element, errorClass, validClass) {
                    $(element).parent().removeClass('error');
                },
                submitHandler: function(form) {
                    var data = {
                        email: $('#email').val(),
                        phone: $('#phone').val().replace('/[\(\)- ]/', '').replace(/^\+/, '00'),
                        firstname: $('#firstname').val(),
                        lastname: $('#lastname').val(),
                        password: $('#password').val(),
                        isAdmin: $('#isAdmin').prop('checked'),
                        locale: $('#locale').val()
                    };

                    if ($('#block').val() !== '') {
                        data.block = $('#block').val();
                    }
                    if ($('#room').val() !== '') {
                        data.room = $('#room').val();
                    }
                    
                    var url = $(form).attr('action'),
                        method = $(form).attr('method');
                    makeRequest(url, method, data, function(res) {
                        for (var key in data) {
                            var $tmp = $('#' + key);
                            if ($tmp.length === 0) {
                                continue;
                            }
                            if ($tmp.get(0).tagName === 'checkbox') {
                                if ($tmp.prop('checked')) {
                                    $tmp.prop('checked', false);
                                }
                            } else if ($tmp.get(0).tagName === 'select') {
                                $tmp.find('option:eq(0)').prop('selected', true);
                            } else {
                                $tmp.val('');
                            }
                        }
                        $('#passwordCheck').val('');
                        addNotification('success', '!{__('success_user_added')}');
                    }, function(res) {
                        console.log(res);
                        if (res instanceof Array) {
                            for (var i = 0; i < res.length; i++) {
                                addNotification('error', res[i].message);
                            }
                        } else {
                            var msg = res.responseJSON.error.message;
                            addNotification('error', msg);
                        }
                    });
                }
            });
        });
