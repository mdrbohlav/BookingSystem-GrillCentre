extends layout

block content
    section.content
        - function capitalizeFirstLetter(string) {
        -     return string.charAt(0).toUpperCase() + string.slice(1);
        - }
        - function pad(n) { 
        -     return n < 10 ? '0' + n : n; 
        - }
        .container__md
            .box
                .box__header.box__header--border
                    h2.text__title !{__('pages_history_title')}
                .box__body
                    .table__wrapper
                        ul#listAllReservations.listReservations.table.table__styled.table--fullsize.table--responsive.text--center
                            each reservation, i in data.reservations
                                - var today = new Date()
                                - today.setUTCHours(0, 0, 0, 0)
                                if i === 0
                                    li.table__row.table__heading
                                        .table__cell(title="#{__('labels_grillCentre')}") !{__('labels_grillCentreShortcut')}
                                        .table__cell(title="#{__('labels_mobileGrill')}") !{__('labels_mobileGrillShortcut')}
                                        .table__cell !{__('labels_state')}
                                        .table__cell !{__('labels_from')}
                                        .table__cell !{__('labels_to')}
                                        .table__cell !{__('labels_action')}
                                li.reservation.table__row(data-id=reservation.id)
                                    .table__cell: span.icon(class=(!reservation.onlyMobileGrill ? 'icon__check' : 'icon__cross'))
                                    .table__cell: span.icon(class=(reservation.mobileGrill ? 'icon__check' : 'icon__cross'))
                                    .reservation__state.table__cell: span.icon(class=(reservation.state === 'draft' ? 'icon__pencil' : reservation.state === 'confirmed' ? 'icon__check' : reservation.state === 'finished' ? 'icon__flag' : 'icon__cross'), title= capitalizeFirstLetter(reservation.state))
                                    .table__cell(data-date='#{reservation.from}')
                                    .table__cell(data-date='#{reservation.to}')
                                    .reservation__action.table__cell
                                        if [ 'draft', 'confirmed' ].indexOf(reservation.state) > -1 && reservation.from >= today
                                            button.btn__cancel.icon.icon__cross(type='button', data-id= reservation.id, title="#{__('buttons_cancel')}")
                            if data.reservations.length === 0
                                li.table__row.table__noborder
                                    .table__cell
                                        p.text__paragraph.text--center !{__('pages_reservations_nothing_3')}
                    if data.total / data.pagination.limit > 1
                        .text--center.margin--top-35
                            ol.pagination
                                - var pages = Math.ceil(data.total / data.pagination.limit)
                                - var current = data.pagination.offset / data.pagination.limit + 1
                                if current === 1
                                    li: button.pagination__prev.icon.icon__arrow-left(type='button', disabled)
                                else
                                    li: button.pagination__prev.icon.icon__arrow-left(type='button', data-page= (current - 1))

                                if current > 2 && pages !== 3
                                    li: button(type='button', data-page='1') 1
                                if current > 3
                                    li: span.text …
                                if current === pages && current > 2
                                    li: button(type='button', data-page= (current - 2))= (current - 2)
                                if current > 1
                                    li: button(type='button', data-page= (current - 1))= (current - 1)
                                li: button(type='button', data-page= current, disabled)= current
                                if current < pages
                                    li: button(type='button', data-page= (current + 1))= (current + 1)
                                if current === 1 && pages > 2
                                    li: button(type='button', data-page= (current + 2))= (current + 2)
                                if current < pages - 2
                                    li: span.text …
                                if current < pages - 1 && pages !== 3
                                    li: button(type='button', data-page= pages)= pages

                                if current < pages
                                    li: button.pagination__next.icon.icon__arrow-right(type='button', data-page= (current + 1))
                                else
                                    li: button.pagination__next.icon.icon__arrow-right(type='button', disabled)

block scripts
    script.
        function generatePagination(current, pages) {
            $pagination = $('.pagination');
            $pagination.html('');

            if (current === 1) {
                $pagination.append('<li><button class="pagination__prev icon icon__arrow-left" type="button" disabled>');
            } else {
                $pagination.append('<li><button class="pagination__prev icon icon__arrow-left" type="button" data-page="' + (current - 1) + '">');
            }

            if (current > 2 && pages !== 3) {
                $pagination.append('<li><button type="button" data-page="1">1');
            }
            if (current > 3) {
                $pagination.append('<li><span class="text">…');
            }
            if (current === pages && current > 2) {
                $pagination.append('<li><button type="button" data-page="' + (current - 2) + '">' + (current - 2));
            }
            if (current > 1) {
                $pagination.append('<li><button type="button" data-page="' + (current - 1) + '">' + (current - 1));
            }
            $pagination.append('<li><button type="button" data-page="' + current + '" disabled>' + current);
            if (current < pages) {
                $pagination.append('<li><button type="button" data-page="' + (current + 1) + '">' + (current + 1));
            }
            if (current === 1 && pages > 2) {
                $pagination.append('<li><button type="button" data-page="' + (current + 2) + '">' + (current + 2));
            }
            if (current < pages - 2) {
                $pagination.append('<li><span class="text">…');
            }
            if (current < pages - 1 && pages !== 3) {
                $pagination.append('<li><button type="button" data-page="' + pages + '">' + pages);
            }

            if (current < pages) {
                $pagination.append('<li><button class="pagination__next icon icon__arrow-right" type="button" data-page="' + (current + 1) + '">');
            } else {
                $pagination.append('<li><button class="pagination__next icon icon__arrow-right" type="button" disabled>');
            }

            paginationFunctionality();
        }

        function cancelBtnFunctionality($btn) {
            $btn.on('click', function() {
                var $this = $(this),
                    $row = $this.closest('.table__row'),
                    id = $this.attr('data-id');

                makeRequest('/api/reservation/' + id + '/cancel', 'PUT', {}, function(res) {
                    addNotification('success', 'Reservation successfully canceled.');
                    $this.remove();
                    $row.find('.reservation__state span').removeClass('icon__pencil').addClass('icon__cross').attr('title', 'Canceled');
                    if ($('.listReservations li:not(.table__heading)').length === 0) {
                        $('.listReservations').replaceWith('<p class="text__paragraph text--center">!{__('pages_reservations_nothing_1')}</p>');
                    }
                });
            });
        }

        function loadPage(page, updateHistory) {
            var limit = #{data.pagination.limit},
                query = 'offset=' + ((page - 1) * limit) + '&limit=' + limit,
                $list = $('#listAllReservations'),
                $spinner = $('<div class="spinner--absolute"></div>').append(getSpinner());

            $list.append($spinner);

            firstLoad = true;
            if (updateHistory) {
                var historyState = {
                        page: page
                    },
                    historyTitle = document.title,
                    historyUrl = window.location.pathname.replace(/\/$/, '');
                historyUrl = historyUrl === '' ? '/' : historyUrl;
                historyUrl += '?' + query;
                history.pushState(historyState, historyTitle, historyUrl);
            }

            makeRequest('/user/history?accept=json&' + query, 'GET', {}, function(res) {
                generatePagination(res.pagination.offset / res.pagination.limit + 1, Math.ceil(res.total / res.pagination.limit));
                
                $list.html(getTableHeading());
                for (var key in res.reservations) {
                    $list.append(getReservationRow(res.reservations[key]));
                }
            });
        }

        function paginationFunctionality() {
            $('.pagination button').on('click', function() {
                var $this = $(this),
                    page = parseInt($this.attr('data-page'));
                loadPage(page, true);
            });
        }

        function getTableHeading() {
            return $('<li class="table__row table__heading">')
                .append('<div class="table__cell" title="!{__('labels_grillCentre')}">!{__('labels_grillCentreShortcut')}')
                .append('<div class="table__cell" title="!{__('labels_mobileGrill')}">!{__('labels_mobileGrillShortcut')}')
                .append('<div class="table__cell">!{__('labels_state')}')
                .append('<div class="table__cell">!{__('labels_from')}')
                .append('<div class="table__cell">!{__('labels_to')}')
                .append('<div class="table__cell">!{__('labels_action')}');
        }

        function getReservationRow(reservation) {
            var $cancel,
                today = new Date();
            today.setUTCHours(0, 0, 0, 0);
            if (reservation.state === 'draft' && reservation.from > today) {
                $cancel = $('<button class="btn__cancel icon icon__cross" type="button" data-id="' + reservation.id + '" title="#{__('buttons_cancel')}">');
                cancelBtnFunctionality($cancel);
            }
            var tmp = moment(),
                start = moment(reservation.from).subtract(tmp.local().utcOffset(), 'm'),
                end = moment(reservation.to).subtract(tmp.local().utcOffset(), 'm');
            return $('<li class="reservation table__row" data-id="' + reservation.id + '">')
                .append('<div class="table__cell"><span class="icon icon__' + (!reservation.onlyMobileGrill ? 'check' : 'cross') + '">')
                .append('<div class="table__cell"><span class="icon icon__' + (reservation.mobileGrill ? 'check' : 'cross') + '">')
                .append('<div class="reservation__state table__cell"><span class="icon icon__' + (reservation.state === 'draft' ? 'pencil' : reservation.state === 'confirmed' ? 'check' : reservation.state === 'finished' ? 'flag' : 'cross') + '" title="' + capitalizeFirstLetter(reservation.state) + '">')
                .append('<div class="table__cell" data-date="' + reservation.from + '">' + start.format('LL'))
                .append('<div class="table__cell" data-date="' + reservation.to + '">' + end.format('LL'))
                .append($('<div class="reservation__action table__cell">').append($cancel));
        }

        $(document).ready(function() {
            moment.locale('#{Object.keys(user.locale)[0]}');

            $('[data-date]').each(function(i, element) {
                var tmp = moment(),
                    date = moment($(element).attr('data-date')).subtract(tmp.local().utcOffset(), 'm');
                $(element).text(date.format('LL'));
            });

            $('.btn__cancel').each(function(i, element) {
                cancelBtnFunctionality($(element));
            });

            paginationFunctionality();

            //=================================================================
            // Popstate
            //=================================================================
            $window.on('popstate', function(e) {
                if (firstLoad) {
                    if (window.history.state && Object.keys(window.history.state).length) {
                        loadPage(window.history.state.page, false);
                    } else {
                        var page = 1;
                        if (urlParam('offset') && urlParam('limit')) {
                            page = parseInt(urlParam('offset')) / parseInt(urlParam('limit')) + 1;
                        }
                        loadPage(page, false);
                    }
                }
                firstLoad = true;
            });
        });
